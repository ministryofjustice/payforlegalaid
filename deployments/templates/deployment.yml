apiVersion: apps/v1
kind: Deployment
metadata:
  name: gpfd-${ENV_NAME}-deployment
  labels:
    app: gpfd-${ENV_NAME}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gpfd-${ENV_NAME}
  template:
    metadata:
      labels:
        app: gpfd-${ENV_NAME}
    spec:
      serviceAccountName: laa-get-payments-finance-data-${ENV_NAME}-service
      volumes:
        - name: liquibase-changelog
          configMap:
            name: liquibase-changelog
            optional: false
            items:
              - key: liquibase-changelogs.tar.gz
                path: liquibase-changelogs.tar.gz
      initContainers:
        - name: liquibase
          image: liquibase/liquibase:4.29.2
          volumeMounts:
            - name: liquibase-changelog
              mountPath: /liquibase/changelog/liquibase-changelogs.tar.gz
              subPath: liquibase-changelogs.tar.gz
              readOnly: true
          env:
            - name: MOJFIN_DEV_WRITE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: mojfin-dev-write-username
            - name: MOJFIN_DEV_WRITE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: mojfin-dev-write-password
            - name: MOJFIN_DB_URL
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: mojfin-db-url
          command:
            - /bin/sh
            - -c
            - |
              if [ -z "$MOJFIN_DB_URL" ] || [ -z "$MOJFIN_DEV_WRITE_USERNAME" ] || [ -z "$MOJFIN_DEV_WRITE_PASSWORD" ]; then
                  echo "❌ ERROR: Required database credentials not set"
                  exit 1
              fi
              
              BASE_FOLDER="/liquibase/files"
              EXPANDED_FOLDER="${BASE_FOLDER}/liquibase-config"
              CHANGELOG_FILENAME="master-changelog.xml"
              CHANGELOG="${EXPANDED_FOLDER}/${CHANGELOG_FILENAME}"
              ARCHIVE="/liquibase/changelog/liquibase-changelogs.tar.gz"
              
              if [ ! -f ${ARCHIVE} ]; then
                echo "❌ ERROR: Changelog archive file not found at ${ARCHIVE}"
                exit 1
              fi
              
              mkdir ${BASE_FOLDER}
              if ! tar xzf ${ARCHIVE} -C ${BASE_FOLDER}; then
                echo "❌ ERROR: Failed to extract $ARCHIVE"
                exit 1
              fi
              
              if [ ! -f ${CHANGELOG} ]; then
                echo "❌ ERROR: Changelog file not found at ${CHANGELOG}"
                exit 1
              fi
              
              db_healthcheck() {
              
                local max_retries=5
                local retry_delay=5
              
                for i in $(seq 1 $max_retries); do
                    if liquibase \
                          --url="$MOJFIN_DB_URL" \
                          --username="$MOJFIN_DEV_WRITE_USERNAME" \
                          --password="$MOJFIN_DEV_WRITE_PASSWORD" \
                          --changelog-file=${CHANGELOG_FILENAME} \
                          --searchPath=${EXPANDED_FOLDER} \
                          status; then
              
                          echo "Database connection established"
                          return 0
                    fi
              
                    echo "⚠️ Attempt $i/$max_retries failed. Retrying in $retry_delay seconds..."
                    sleep $retry_delay
                done
              
                echo "❌ Error: Could not establish database connection"
                exit 1
              }
              
              run_update() {
                  liquibase \
                      --url="$MOJFIN_DB_URL" \
                      --username="$MOJFIN_DEV_WRITE_USERNAME" \
                      --password="$MOJFIN_DEV_WRITE_PASSWORD" \
                      --log-level=INFO \
                      --changelog-file=${CHANGELOG_FILENAME} \
                      --searchPath=${EXPANDED_FOLDER} \
                      update
              }
              
              cleanup() {
                echo "Executing clean database strategy"              
                liquibase \
                --url="$MOJFIN_DB_URL" \
                --username="$MOJFIN_DEV_WRITE_USERNAME" \
                --password="$MOJFIN_DEV_WRITE_PASSWORD" \
                --changelog-file=${CHANGELOG_FILENAME} \
                --searchPath=${EXPANDED_FOLDER} \
                drop-all --force
              
                echo "Database cleaned, reapplying migrations"
              }
              
              echo "Checking database connectivity..."
              db_healthcheck

              echo "Running initial Liquibase update..."
              if run_update; then
                  echo "✅ Liquibase update completed successfully"
                  exit 0
              fi

              echo "⚠️ Initial update failed, performing clean and retrying..."
              cleanup

              echo "Running Liquibase update after clean..."
              if run_update; then
                  echo "✅ Liquibase update completed successfully after clean"
                  exit 0
              else
                  echo "❌ Liquibase update failed even after clean"
                  exit 1
              fi
          securityContext:
            runAsUser: 1001
            runAsGroup: 1001
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
      containers:
        - name: gpfd-api-container-${ENV_NAME}
          image: ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}
          ports:
            - containerPort: 8080
          env:
            - name: GPFD_URL
              value: https://${GPFD_URL}
            - name: SPRING_PROFILES_ACTIVE
              value: ${ENV_NAME}
            - name: AZURE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: client-secret-${ENV_NAME}
            - name: AZURE_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: client-id-${ENV_NAME}
            - name: AZURE_TENANT_ID
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: tenant-id-${ENV_NAME}
            - name: MOJFIN_DEV_READ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: mojfin-dev-read-username
            - name: MOJFIN_DEV_READ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: mojfin-dev-read-password
            - name: MOJFIN_DEV_WRITE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: mojfin-dev-write-username
            - name: MOJFIN_DEV_WRITE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: mojfin-dev-write-password
            - name: MOJFIN_DB_URL
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: mojfin-db-url
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
