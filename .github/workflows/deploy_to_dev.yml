on:
  push:
#    branches:
#      - main

jobs:
  copyRobsOne:
    environment: development
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout
    steps:
      # Checkout GitHub repository
      - uses: actions/checkout@v4

      - name: Group of log lines
        run: |
          echo [FOOBAR] showing my credentials: ${{ secrets.ECR_ROLE_TO_ASSUME }}
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.ECR_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Set Spring profile
        run: echo "SPRING_PROFILES_ACTIVE=dev" >> $GITHUB_ENV

      # Setup Javax
      - uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      # Build and package JAR
      - name: Build with Maven
        run: mvn -B -DskipTests clean package


      - run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
      # Generate Kubernetes files from the deployments/dev/*.yml files
      - env:
          IMAGE_TAG: ${{ github.sha }} # Tags ECR image with commit sha
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          NAMESPACE: ${{ secrets.KUBE_NAMESPACE_DEV }}
        run: |
          echo $NAMESPACE
          echo $KUBE_NAMESPACE
          echo $REPOSITORY
          echo test
          cat deployments/dev/deployment.tpl | envsubst > deployments/dev/deployment.yml
          cat deployments/dev/ingress.tpl | envsubst > deployments/dev/ingress.yml
          cat deployments/dev/service.tpl | envsubst > deployments/dev/service.yml
      - env:
          KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE_DEV }}
          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER_DEV }}
        run: |
          echo "${{ secrets.KUBE_CERT_DEV }}" > ca.crt
          echo "${{ secrets.KUBE_CERT_UAT }}" > ca2.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${{ secrets.KUBE_TOKEN_DEV }}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${KUBE_NAMESPACE}
          kubectl config use-context ${KUBE_CLUSTER}
          kubectl -n ${KUBE_NAMESPACE} apply -f deployments/dev/

#jobs:
#
#  build-and-deploy-to-dev:
#    environment: development # Points to the set of environment secrets kept in GitHub secrets
#    runs-on: ubuntu-latest
#    permissions:
#      id-token: write # This is required for requesting the JWT
#      contents: read  # This is required for actions/checkout
#
#    steps:
#      - name: Checkout Github Repository
#        uses: actions/checkout@v4
#
#      # Assume role in Cloud Platform
#      - uses: aws-actions/configure-aws-credentials@v4
#        with:
#          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
#          aws-region: ${{ vars.ECR_REGION }}
#
#      # Login to container repository
#      - uses: aws-actions/amazon-ecr-login@v2
#        id: login-ecr
#
#      - name: Set Spring profile
#        run: echo "SPRING_PROFILES_ACTIVE=dev" >> $GITHUB_ENV
#
#    #  - uses: './.github/build-and-test'
#        # Setup Javax
#      - uses: actions/setup-java@v4
#        with:
#          distribution: 'corretto'
#          java-version: '17'
#
#      # Run Tests
#      - name: Run tests
#        run: mvn -B clean test
#        env:
#          SPRING_PROFILES_ACTIVE: test
#        shell:
#          bash
#
#      # Build and package JAR
#      - name: Build with Maven
#        run: mvn -B -DskipTests clean package
#        #shell:
#         # bash
#
#     # - uses: './.github/login-to-aws'
#      #  env:
#       #   ROLE: ${{ secrets.ECR_ROLE_TO_ASSUME }}
#        #  AWS_REGION: ${{ vars.ECR_REGION }}
#
#      #- uses: './.github/build-push-docker-image'
#       # env:
#        #  REPOSITORY: ${{ vars.ECR_REPOSITORY }}
#         # IMAGE_TAG: ${{ github.sha }}
#          #REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#
#      # Build and push a Docker image to the container repository
#      - run: |
#          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
#          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
#
#        env:
#          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
#          IMAGE_TAG: ${{ github.sha }}
#       # shell: bash
#
#      # Generate Kubernetes files from the deployments/dev/*.yml files
#      - env:
#          IMAGE_TAG: ${{ github.sha }} # Tags ECR image with commit sha
#          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
#          NAMESPACE: ${{ secrets.KUBE_NAMESPACE_DEV }}
#        run: |
#          echo $NAMESPACE
#          echo $KUBE_NAMESPACE
#          echo $REPOSITORY
#          echo test
#          cat deployments/dev/deployment.tpl | envsubst > deployments/dev/deployment.yml
#          cat deployments/dev/ingress.tpl | envsubst > deployments/dev/ingress.yml
#          cat deployments/dev/service.tpl | envsubst > deployments/dev/service.yml
#
#      # authenticates with the Cloud Platform and deploys the container image to the namespace
#      - env:
#          KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE_DEV }}
#          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER_DEV }}
#        run: |
#          echo "${{ secrets.KUBE_CERT_DEV }}" > ca.crt
#          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
#          kubectl config set-credentials deploy-user --token=${{ secrets.KUBE_TOKEN_DEV }}
#          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${KUBE_NAMESPACE}
#          kubectl config use-context ${KUBE_CLUSTER}
#          kubectl -n ${KUBE_NAMESPACE} apply -f deployments/dev/
    
