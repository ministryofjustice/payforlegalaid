name: Deploy API to Environment

on:
  workflow_call:
    inputs:
      github_environment:
        type: string
        required: true
      environment_name:
        type: string
        required: true
      gpfd_url:
        type: string
        required: true
      alert_severity:
        type: string
        required: true
      secret_name:
        type: string
        required: true
      data_branch:
        type: string
        default: LPF-915
    secrets:
      api_socket_key:
        required: true
      snyk_token:
        required: true
      socket_key:
        required: true
      ecr_role_to_assume:
        required: true
      data_ecr_role_to_assume:
        required: false
      kube_namespace:
        required: true
      kube_cluster:
        required: true
      kube_token:
        required: true
      kube_cert:
        required: true

jobs:
  build-and-deploy:
    environment: ${{ inputs.github_environment }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout

    steps:
      - name: Checkout Github Repository
        uses: actions/checkout@v4

      - name: Build and test the code
        uses: './.github/build-and-test'
        env:
          SOCKET_KEY: ${{ secrets.api_socket_key }}

      - name: Run Snyk security suite
        uses: './.github/snyk-scan'
        env:
          SNYK_TOKEN: ${{ secrets.snyk_token }}

      - name: Set Spring profile
        run: echo "SPRING_PROFILES_ACTIVE=${{ inputs.environment_name }}" >> $GITHUB_ENV

      - uses: './.github/login-to-aws'
        env:
          ROLE: ${{ secrets.ecr_role_to_assume }}
          AWS_REGION: ${{ vars.ECR_REGION }}

      - name: Login to container repository
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Build the docker image and push it to the repository
        uses: './.github/build-push-docker-image'
        env:
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          SOCKET_KEY: ${{ secrets.api_socket_key }}

      - name: Build the liquibase docker image and push it to the repository
        uses: './.github/build-and-push-liquibase-image'
        id: liquibase-image
        env:
          ROLE: ${{ secrets.data_ecr_role_to_assume }}
          AWS_REGION: ${{ vars.DEV_DATA_ECR_REGION }}
          REPOSITORY: ${{ vars.DEV_DATA_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          SOCKET_KEY: ${{ secrets.socket_key }}

      - name: Get latest commit SHA from data repo
        id: get_sha
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.socket_key }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          SHA=$(git ls-remote git@github.com:ministryofjustice/payforlegalaid-data.git refs/heads/${{ inputs.data_branch }} | cut -f1)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Generate Kubernetes files from templates
        env:
          IMAGE_TAG: ${{ github.sha }} # Tags ECR image with commit sha
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          NAMESPACE: ${{ secrets.kube_namespace }}
          ALERT_SEVERITY: ${{ inputs.alert_severity }}
          ENV_NAME: ${{ inputs.environment_name }}
          GPFD_URL: ${{ inputs.gpfd_url }}
          SECRET_NAME: ${{ inputs.secret_name }}
          DATA_REPOSITORY: ${{ vars.DEV_DATA_ECR_REPOSITORY }}
          DATA_REGISTRY: ${{ steps.liquibase-image.outputs.data_registry }}
          DATA_IMAGE_TAG: ${{ steps.get_sha.outputs.sha }}
        run: |
          template_processing=(
            "ingress:ingress"
            "service:service"
            "service-monitor:service-monitor"
            "network-policy:network-policy"
            "prometheus-rules:prometheus-rules"
            "grafana-dashboard:grafana-dashboard:\$ENV_NAME,\$NAMESPACE"
            "deployment:deployment:\$ENV_NAME,\$SECRET_NAME,\$GPFD_URL,\$REGISTRY,\$REPOSITORY,\$IMAGE_TAG,\$DATA_REPOSITORY,\$DATA_REGISTRY,\$DATA_IMAGE_TAG"
          )
          
          for item in "${template_processing[@]}"; do
            IFS=':' read -r template output vars <<< "$item"
            input="deployments/templates/${template}.yml"
            output="deployments/${output}.yml"
          
            if [[ -n "$vars" ]]; then
              envsubst "$vars" < "$input" > "$output"
            else
              DOLLAR='$' envsubst < "$input" > "$output"
            fi
          done

      - name: Authenticate with Cloud Platform and Deploy
        env:
          KUBE_NAMESPACE: ${{ secrets.kube_namespace }}
          KUBE_CLUSTER: ${{ secrets.kube_cluster }}
        run: |
          echo "${{ secrets.kube_cert }}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${{ secrets.kube_token }}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${KUBE_NAMESPACE}
          kubectl config use-context ${KUBE_CLUSTER}

          kubectl -n ${KUBE_NAMESPACE} apply -f deployments
